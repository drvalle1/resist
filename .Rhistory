source('gibbs_resist_func.R')
source('slice_b_gamma.R')
source('slice_betas.R')
sourceCpp('resist_aux.cpp')
dat=read.csv('fake data.csv',as.is=T)
ind=grep('cov',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
seg.id=dat$seg.id
ngroup=4
#get y soma
tmp=unique(dat[,c('seg.id','ysoma')])
cond=!is.na(tmp$ysoma)
ysoma=tmp[cond,'ysoma']
ngibbs=1000
nburn=ngibbs/2
w=0.1
MaxIter=100
#priors
gamma1=0.1
var.betas=c(100,rep(10,ncol(xmat)-1))
n=nrow(xmat)
nparam=ncol(xmat)
nagg=length(ysoma)
#initial parameters
betas=matrix(0,nparam,ngroup)
betas[1,]=log(mean(ysoma))
b.gamma=10
z=sample(1:ngroup,size=nagg,replace=T)
theta=rep(1/ngroup,ngroup)
#stuff for gibbs sampler
store.betas=matrix(NA,ngibbs,nparam*ngroup)
store.b=matrix(NA,ngibbs,1)
store.theta=matrix(NA,ngibbs,ngroup)
store.llk=matrix(NA,ngibbs,1)
for (i in 1:ngibbs){
print(i)
#sample betas
betas=Sample_betas(ngroups=ngroup,nparam=nparam,xmat=xmat,z=z,
ysoma=ysoma,betas=betas,b.gamma=b.gamma,var.betas=var.betas,
w=w,MaxIter=MaxIter,seg.id=seg.id,nagg=nagg)
# betas=betas.true
#sample b.gamma
b.gamma=Sample_bgamma(ngroups=ngroup,nparam=nparam,xmat=xmat,
z=z,ysoma=ysoma,betas=betas,b.gamma=b.gamma,
w=w,MaxIter=MaxIter,seg.id=seg.id,nagg=nagg)
# b.gamma=b.true
#sample z
# z=sample.z(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,
#            seg.id=seg.id,ngroup=ngroup,nagg=nagg,theta=theta)
z=z.true
#sample theta
theta=rep(1/ngroup,ngroup)
#get llk
p=get.llk(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,
seg.id=seg.id,ngroup=ngroup,nagg=nagg)
#sum the loglikel for the correct group
llk1=GetSomaLlkGroups(llk=p, z=z-1, ngroups=ngroup)
#store results
store.betas[i,]=betas
store.b[i]=b.gamma
store.llk[i]=sum(llk1)
store.theta[i,]=theta
z.estim=z
}
k=cor(cbind(store.b,store.betas))
k[k < 0.5 | k > -0.5]=NA
k
par(mfrow=c(1,1))
plot(store.llk,type='l')
nburn=200
abline(v=nburn,col='red')
plot(store.llk[nburn:ngibbs],type='l')
par(mfrow=c(3,3),mar=rep(1,4))
ind=sample(1:ncol(store.betas),size=9)
for (i in 1:9) plot(store.betas[1:ngibbs,ind[i]],type='l')
#look at convergence of b.gammas
par(mfrow=c(2,ceiling(ngroup/2)))
for (i in 1:ngroup) plot(store.b[,i],type='l')
par(mfrow=c(2,ceiling(ngroup/2)))
for (i in 1:ngroup) plot(store.b,type='l')
abline(h=b.true,col='red')
par(mfrow=c(1,1))
plot(store.b,type='l')
abline(h=b.true,col='red')
fim=data.frame(z.estim=z.estim,z.true=z.true)
tab1=table(fim); tab1
ordem=numeric()
for (i in 1:ncol(tab1)){
ind=which(tab1[,i]==max(tab1[,i]))
ordem=c(ordem,ind)
}
tab1[ordem,]
ngroup=4
par(mfrow=c(1,1),mar=rep(3,4))
betas.estim=matrix(store.betas[ngibbs,],ncol(store.betas)/ngroup,ngroup)
rango=range(c(betas.estim[,ordem],betas.true))
plot(betas.true,betas.estim[,ordem],xlim=rango,ylim=rango)
lines(rango,rango,col='red')
b.true
rm(list=ls())
set.seed(21)
setwd('U:\\GIT_models\\resist')
n=50000
nparam=3
xmat=matrix(runif(n*nparam,min=-2,max=2),n,nparam)
nomes.cov=paste0('covs',1:nparam)
colnames(xmat)=nomes.cov
n=nrow(xmat)
ngroup=4
betas.true=betas=matrix(c( 2, 0 ,1,-2,
0, 2, 0,-1,
-1, 0, 0, 0,
0, 0, 2, 0),nparam+1,ngroup,byrow=T)
media=exp(cbind(1,xmat)%*%betas); range(round(media,3))
b.true=b=1
a=b*media
ymat=matrix(rgamma(n*ngroup,a,b),n,ngroup);
fim=as.data.frame(xmat)
fim$z=NA
fim$ysoma=NA
fim$seg.id=NA
#aggregate these data
ind=floor(c(seq(from=1,to=n,by=n/5000),n+1)) #has to include 1 and n to use all observations
for (i in 2:length(ind)){
seq1=ind[i-1]:(ind[i]-1)
n=length(seq1)
fim$seg.id[seq1]=i-1
z=sample(1:ngroup,size=1)
fim$z[ind[i]-1]=z
ysoma=ymat[seq1,z]
fim$ysoma[ind[i]-1]=sum(ysoma)
}
max(fim$seg.id)
length(unique(fim$seg.id))
range(fim$ysoma,na.rm=T)
#get z.true
tmp=unique(fim[,c('z','seg.id')])
z.true=tmp[!is.na(tmp$z),'z']
table(z.true)
#export results
ind=which(colnames(fim)=='z')
setwd('U:\\GIT_models\\resist')
write.csv(fim[,-ind],'fake data.csv',row.names=F)
rm(list=ls())
set.seed(28)
setwd('U:\\GIT_models\\resist')
n=50000
nparam=3
xmat=matrix(runif(n*nparam,min=-2,max=2),n,nparam)
nomes.cov=paste0('covs',1:nparam)
colnames(xmat)=nomes.cov
n=nrow(xmat)
rm(list=ls())
set.seed(28)
setwd('U:\\GIT_models\\resist')
n=50000
nparam=3
xmat=matrix(runif(n*nparam,min=-2,max=2),n,nparam)
nomes.cov=paste0('covs',1:nparam)
colnames(xmat)=nomes.cov
n=nrow(xmat)
ngroup=4
betas.true=betas=matrix(c( 2, 0 ,1,-2,
0, 2, 0,-1,
-1, 0, 0, 0,
0, 0, 2, 0),nparam+1,ngroup,byrow=T)
media=exp(cbind(1,xmat)%*%betas); range(round(media,3))
b.true=b=1
a=b*media
ymat=matrix(rgamma(n*ngroup,a,b),n,ngroup);
fim=as.data.frame(xmat)
fim$z=NA
fim$ysoma=NA
fim$seg.id=NA
#aggregate these data
ind=floor(c(seq(from=1,to=n,by=n/5000),n+1)) #has to include 1 and n to use all observations
ind
tail(ind)
for (i in 2:length(ind)){
seq1=ind[i-1]:(ind[i]-1)
n=length(seq1)
fim$seg.id[seq1]=i-1
z=sample(1:ngroup,size=1)
fim$z[ind[i]-1]=z
ysoma=ymat[seq1,z]
fim$ysoma[ind[i]-1]=sum(ysoma)
}
max(fim$seg.id)
length(unique(fim$seg.id))
range(fim$ysoma,na.rm=T)
tmp=unique(fim[,c('z','seg.id')])
z.true=tmp[!is.na(tmp$z),'z']
table(z.true)
#export results
ind=which(colnames(fim)=='z')
setwd('U:\\GIT_models\\resist')
write.csv(fim[,-ind],'fake data.csv',row.names=F)
library('Rcpp')
set.seed(6)
setwd('U:\\GIT_models\\resist')
source('gibbs_resist.R')
source('gibbs_resist_func.R')
source('slice_b_gamma.R')
source('slice_betas.R')
sourceCpp('resist_aux.cpp')
dat=read.csv('fake data.csv',as.is=T)
ind=grep('cov',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
seg.id=dat$seg.id
ngroup=4
#get y soma
tmp=unique(dat[,c('seg.id','ysoma')])
cond=!is.na(tmp$ysoma)
ysoma=tmp[cond,'ysoma']
ngibbs=1000
nburn=ngibbs/2
w=0.1
MaxIter=100
#priors
gamma1=0.1
var.betas=c(100,rep(10,ncol(xmat)-1))
n=nrow(xmat)
nparam=ncol(xmat)
nagg=length(ysoma)
#initial parameters
betas=matrix(0,nparam,ngroup)
betas[1,]=log(mean(ysoma))
b.gamma=10
z=sample(1:ngroup,size=nagg,replace=T)
theta=rep(1/ngroup,ngroup)
#stuff for gibbs sampler
store.betas=matrix(NA,ngibbs,nparam*ngroup)
store.b=matrix(NA,ngibbs,1)
store.theta=matrix(NA,ngibbs,ngroup)
store.llk=matrix(NA,ngibbs,1)
for (i in 1:ngibbs){
print(i)
#sample betas
betas=Sample_betas(ngroups=ngroup,nparam=nparam,xmat=xmat,z=z,
ysoma=ysoma,betas=betas,b.gamma=b.gamma,var.betas=var.betas,
w=w,MaxIter=MaxIter,seg.id=seg.id,nagg=nagg)
# betas=betas.true
#sample b.gamma
# b.gamma=Sample_bgamma(ngroups=ngroup,nparam=nparam,xmat=xmat,
#                       z=z,ysoma=ysoma,betas=betas,b.gamma=b.gamma,
#                       w=w,MaxIter=MaxIter,seg.id=seg.id,nagg=nagg)
b.gamma=b.true
#sample z
# z=sample.z(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,
#            seg.id=seg.id,ngroup=ngroup,nagg=nagg,theta=theta)
z=z.true
#sample theta
theta=rep(1/ngroup,ngroup)
#get llk
p=get.llk(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,
seg.id=seg.id,ngroup=ngroup,nagg=nagg)
#sum the loglikel for the correct group
llk1=GetSomaLlkGroups(llk=p, z=z-1, ngroups=ngroup)
#store results
store.betas[i,]=betas
store.b[i]=b.gamma
store.llk[i]=sum(llk1)
store.theta[i,]=theta
z.estim=z
}
rm(list=ls())
set.seed(28)
setwd('U:\\GIT_models\\resist')
n=50000
nparam=3
xmat=matrix(runif(n*nparam,min=-2,max=2),n,nparam)
nomes.cov=paste0('covs',1:nparam)
colnames(xmat)=nomes.cov
n=nrow(xmat)
ngroup=4
betas.true=betas=matrix(c( 2, 0 ,1,-2,
0, 2, 0,-1,
-1, 0, 0, 0,
0, 0, 2, 0),nparam+1,ngroup,byrow=T)
media=exp(cbind(1,xmat)%*%betas); range(round(media,3))
b.true=b=2
a=b*media
ymat=matrix(rgamma(n*ngroup,a,b),n,ngroup);
fim=as.data.frame(xmat)
fim$z=NA
fim$ysoma=NA
fim$seg.id=NA
#aggregate these data
ind=floor(c(seq(from=1,to=n,by=n/5000),n+1)) #has to include 1 and n to use all observations
for (i in 2:length(ind)){
seq1=ind[i-1]:(ind[i]-1)
n=length(seq1)
fim$seg.id[seq1]=i-1
z=sample(1:ngroup,size=1)
fim$z[ind[i]-1]=z
ysoma=ymat[seq1,z]
fim$ysoma[ind[i]-1]=sum(ysoma)
}
max(fim$seg.id)
length(unique(fim$seg.id))
range(fim$ysoma,na.rm=T)
#get z.true
tmp=unique(fim[,c('z','seg.id')])
z.true=tmp[!is.na(tmp$z),'z']
table(z.true)
#export results
ind=which(colnames(fim)=='z')
setwd('U:\\GIT_models\\resist')
write.csv(fim[,-ind],'fake data.csv',row.names=F)
library('Rcpp')
set.seed(6)
setwd('U:\\GIT_models\\resist')
source('gibbs_resist.R')
source('gibbs_resist_func.R')
source('slice_b_gamma.R')
source('slice_betas.R')
sourceCpp('resist_aux.cpp')
dat=read.csv('fake data.csv',as.is=T)
ind=grep('cov',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
seg.id=dat$seg.id
ngroup=4
#get y soma
tmp=unique(dat[,c('seg.id','ysoma')])
cond=!is.na(tmp$ysoma)
ysoma=tmp[cond,'ysoma']
ngibbs=1000
nburn=ngibbs/2
w=0.1
MaxIter=100
#priors
gamma1=0.1
var.betas=c(100,rep(10,ncol(xmat)-1))
n=nrow(xmat)
nparam=ncol(xmat)
nagg=length(ysoma)
#initial parameters
betas=matrix(0,nparam,ngroup)
b.gamma=1
z=sample(1:ngroup,size=nagg,replace=T)
theta=rep(1/ngroup,ngroup)
#stuff for gibbs sampler
store.betas=matrix(NA,ngibbs,nparam*ngroup)
store.b=matrix(NA,ngibbs,1)
store.theta=matrix(NA,ngibbs,ngroup)
store.llk=matrix(NA,ngibbs,1)
for (i in 1:ngibbs){
print(i)
#sample betas
betas=Sample_betas(ngroups=ngroup,nparam=nparam,xmat=xmat,z=z,
ysoma=ysoma,betas=betas,b.gamma=b.gamma,var.betas=var.betas,
w=w,MaxIter=MaxIter,seg.id=seg.id,nagg=nagg)
# betas=betas.true
#sample b.gamma
# b.gamma=Sample_bgamma(ngroups=ngroup,nparam=nparam,xmat=xmat,
#                       z=z,ysoma=ysoma,betas=betas,b.gamma=b.gamma,
#                       w=w,MaxIter=MaxIter,seg.id=seg.id,nagg=nagg)
b.gamma=b.true
#sample z
# z=sample.z(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,
#            seg.id=seg.id,ngroup=ngroup,nagg=nagg,theta=theta)
z=z.true
#sample theta
theta=rep(1/ngroup,ngroup)
#get llk
p=get.llk(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,
seg.id=seg.id,ngroup=ngroup,nagg=nagg)
#sum the loglikel for the correct group
llk1=GetSomaLlkGroups(llk=p, z=z-1, ngroups=ngroup)
#store results
store.betas[i,]=betas
store.b[i]=b.gamma
store.llk[i]=sum(llk1)
store.theta[i,]=theta
z.estim=z
}
k=cor(cbind(store.b,store.betas))
k[k < 0.5 | k > -0.5]=NA
k
par(mfrow=c(1,1))
plot(store.llk,type='l')
nburn=200
abline(v=nburn,col='red')
plot(store.llk[nburn:ngibbs],type='l')
par(mfrow=c(3,3),mar=rep(1,4))
ind=sample(1:ncol(store.betas),size=9)
for (i in 1:9) plot(store.betas[1:ngibbs,ind[i]],type='l')
for (i in 1:9) plot(store.betas[nburn:ngibbs,ind[i]],type='l')
par(mfrow=c(1,1))
plot(store.b,type='l')
abline(h=b.true,col='red')
fim=data.frame(z.estim=z.estim,z.true=z.true)
tab1=table(fim); tab1
ngroup=4
par(mfrow=c(1,1),mar=rep(3,4))
betas.estim=matrix(store.betas[ngibbs,],ncol(store.betas)/ngroup,ngroup)
rango=range(c(betas.estim[,ordem],betas.true))
plot(betas.true,betas.estim[,ordem],xlim=rango,ylim=rango)
lines(rango,rango,col='red')
ordem=1:4
ngroup=4
par(mfrow=c(1,1),mar=rep(3,4))
betas.estim=matrix(store.betas[ngibbs,],ncol(store.betas)/ngroup,ngroup)
rango=range(c(betas.estim[,ordem],betas.true))
plot(betas.true,betas.estim[,ordem],xlim=rango,ylim=rango)
lines(rango,rango,col='red')
n=nrow(xmat)
nparam=ncol(xmat)
nagg=length(ysoma)
#initial parameters
betas=matrix(0,nparam,ngroup)
b.gamma=1
z=sample(1:ngroup,size=nagg,replace=T)
theta=rep(1/ngroup,ngroup)
#stuff for gibbs sampler
store.betas=matrix(NA,ngibbs,nparam*ngroup)
store.b=matrix(NA,ngibbs,1)
store.theta=matrix(NA,ngibbs,ngroup)
store.llk=matrix(NA,ngibbs,1)
for (i in 1:ngibbs){
print(i)
#sample betas
betas=Sample_betas(ngroups=ngroup,nparam=nparam,xmat=xmat,z=z,
ysoma=ysoma,betas=betas,b.gamma=b.gamma,var.betas=var.betas,
w=w,MaxIter=MaxIter,seg.id=seg.id,nagg=nagg)
# betas=betas.true
#sample b.gamma
b.gamma=Sample_bgamma(ngroups=ngroup,nparam=nparam,xmat=xmat,
z=z,ysoma=ysoma,betas=betas,b.gamma=b.gamma,
w=w,MaxIter=MaxIter,seg.id=seg.id,nagg=nagg)
# b.gamma=b.true
#sample z
# z=sample.z(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,
#            seg.id=seg.id,ngroup=ngroup,nagg=nagg,theta=theta)
z=z.true
#sample theta
theta=rep(1/ngroup,ngroup)
#get llk
p=get.llk(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,
seg.id=seg.id,ngroup=ngroup,nagg=nagg)
#sum the loglikel for the correct group
llk1=GetSomaLlkGroups(llk=p, z=z-1, ngroups=ngroup)
#store results
store.betas[i,]=betas
store.b[i]=b.gamma
store.llk[i]=sum(llk1)
store.theta[i,]=theta
z.estim=z
}
par(mfrow=c(1,1))
plot(store.llk,type='l')
nburn=200
abline(v=nburn,col='red')
plot(store.llk[nburn:ngibbs],type='l')
par(mfrow=c(3,3),mar=rep(1,4))
ind=sample(1:ncol(store.betas),size=9)
for (i in 1:9) plot(store.betas[1:ngibbs,ind[i]],type='l')
par(mfrow=c(1,1))
plot(store.b,type='l')
abline(h=b.true,col='red')
par(mfrow=c(1,1))
plot(store.b,type='l')
abline(h=b.true,col='red')
par(mfrow=c(3,3),mar=rep(1,4))
ind=sample(1:ncol(store.betas),size=9)
for (i in 1:9) plot(store.betas[1:ngibbs,ind[i]],type='l')
k=cor(cbind(store.b,store.betas))
k[k < 0.5 & k > -0.5]=NA
k
library('Rcpp')
set.seed(6)
setwd('U:\\GIT_models\\resist')
source('gibbs_resist.R')
source('gibbs_resist_func.R')
source('slice_b_gamma.R')
# source('slice_betas.R')
sourceCpp('resist_aux.cpp')
dat=read.csv('fake data.csv',as.is=T)
ind=grep('cov',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
seg.id=dat$seg.id
ngroup=4
#get y soma
tmp=unique(dat[,c('seg.id','ysoma')])
cond=!is.na(tmp$ysoma)
ysoma=tmp[cond,'ysoma']
ngibbs=1000
nburn=ngibbs/2
w=0.1
MaxIter=100
#priors
gamma1=0.1
var.betas=c(100,rep(10,ncol(xmat)-1))
n=nrow(xmat)
nparam=ncol(xmat)
nagg=length(ysoma)
#initial parameters
betas=matrix(0,nparam,ngroup)
b.gamma=1
z=sample(1:ngroup,size=nagg,replace=T)
theta=rep(1/ngroup,ngroup)
#stuff for gibbs sampler
jump1=list(betas=matrix(0.1,nparam,ngroup))
accept1=list(betas=matrix(0,nparam,ngroup))
store.betas=matrix(NA,ngibbs,nparam*ngroup)
store.b=matrix(NA,ngibbs,1)
store.theta=matrix(NA,ngibbs,ngroup)
store.llk=matrix(NA,ngibbs,1)
tmp=sample.betas(betas=betas,xmat=xmat,ysoma=ysoma,jump=jump1$betas,
b.gamma=b.gamma,nparam=nparam,var.betas=var.betas,
seg.id=seg.id,ngroup=ngroup,nagg=nagg,z=z)
tmp
