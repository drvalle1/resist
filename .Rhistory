z=sample(1:ngroups,size=n.ysoma,replace=T)
theta=rep(1/ngroups,ngroups)
#stuff for gibbs sampler
jump1=list(b.gamma=1)
accept1=list(b.gamma=0)
store.betas=matrix(NA,ngibbs,nparam*ngroups)
store.z=matrix(NA,ngibbs,n.ysoma)
store.b=matrix(NA,ngibbs,1)
store.llk=matrix(NA,ngibbs,1)
store.theta=matrix(NA,ngibbs,ngroups)
nadapt=50
Doubling_bgamma=function(soma.media,w,b.gamma,yslice,MaxIter,ysoma){
b.gammaLo=b.gamma-w*runif(1)
b.gammaHi=bgammaLo+w
#calculate llk
ylo=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gammaLo)
yhi=llk_betas(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gammaHi)
#keep doubling until ylo<yslice and yhi<yslice
oo=0
while ((ylo>yslice) & (oo<MaxIter)){
b.gammaLo=b.gammaLo-w
ylo=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gammaLo)
oo=oo+1
}
oo=0
while ((yhi>yslice) & (oo<MaxIter)){
b.gammaHi=b.gammaHi+w
yhi=llk_betas(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gammaHi)
oo=oo+1
}
c(b.gammaLo,b.gammaHi)
}
media=exp(xmat%*%betas)
soma.media=GetSomaMedia(z=z-1,media=media,ngroups=ngroups,nysoma=n.ysoma,SegID=seg.id-1)
upper1=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gamma)
yslice=upper1-rexp(1);
llk_bgamma=function(soma.media,ysoma,b.gamma){
a1=b.gamma*soma.media
sum(dgamma(ysoma,a1,b.gamma,log=T))
}
media=exp(xmat%*%betas)
soma.media=GetSomaMedia(z=z-1,media=media,ngroups=ngroups,nysoma=n.ysoma,SegID=seg.id-1)
#define upper bound
upper1=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gamma)
yslice=upper1-rexp(1);
rango1=Doubling_bgamma(soma.media=soma.media,w=w,b.gamma=b.gamma,yslice=yslice,MaxIter=MaxIter,ysoma=ysoma)
Doubling_bgamma=function(soma.media,w,b.gamma,yslice,MaxIter,ysoma){
b.gammaLo=b.gamma-w*runif(1)
b.gammaHi=b.gammaLo+w
#calculate llk
ylo=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gammaLo)
yhi=llk_betas(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gammaHi)
#keep doubling until ylo<yslice and yhi<yslice
oo=0
while ((ylo>yslice) & (oo<MaxIter)){
b.gammaLo=b.gammaLo-w
ylo=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gammaLo)
oo=oo+1
}
oo=0
while ((yhi>yslice) & (oo<MaxIter)){
b.gammaHi=b.gammaHi+w
yhi=llk_betas(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gammaHi)
oo=oo+1
}
c(b.gammaLo,b.gammaHi)
}
media=exp(xmat%*%betas)
soma.media=GetSomaMedia(z=z-1,media=media,ngroups=ngroups,nysoma=n.ysoma,SegID=seg.id-1)
#define upper bound
upper1=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gamma)
yslice=upper1-rexp(1);
rango1=Doubling_bgamma(soma.media=soma.media,w=w,b.gamma=b.gamma,yslice=yslice,MaxIter=MaxIter,ysoma=ysoma)
Doubling_bgamma=function(soma.media,w,b.gamma,yslice,MaxIter,ysoma){
b.gammaLo=b.gamma-w*runif(1)
b.gammaHi=b.gammaLo+w
#calculate llk
ylo=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gammaLo)
yhi=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gammaHi)
#keep doubling until ylo<yslice and yhi<yslice
oo=0
while ((ylo>yslice) & (oo<MaxIter)){
b.gammaLo=b.gammaLo-w
ylo=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gammaLo)
oo=oo+1
}
oo=0
while ((yhi>yslice) & (oo<MaxIter)){
b.gammaHi=b.gammaHi+w
yhi=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gammaHi)
oo=oo+1
}
c(b.gammaLo,b.gammaHi)
}
media=exp(xmat%*%betas)
soma.media=GetSomaMedia(z=z-1,media=media,ngroups=ngroups,nysoma=n.ysoma,SegID=seg.id-1)
#define upper bound
upper1=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gamma)
yslice=upper1-rexp(1);
#define slice
rango1=Doubling_bgamma(soma.media=soma.media,w=w,b.gamma=b.gamma,yslice=yslice,MaxIter=MaxIter,ysoma=ysoma)
b.gammaLo=b.gamma-w*runif(1)
b.gammaHi=b.gammaLo+w
#calculate llk
ylo=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gammaLo)
yhi=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gammaHi)
ylo
yhi
oo=0
while ((ylo>yslice) & (oo<MaxIter)){
b.gammaLo=b.gammaLo-w
ylo=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gammaLo)
oo=oo+1
}
yslice
ylo
b.gammaLo=b.gamma-w*runif(1)
b.gammaHi=b.gammaLo+w
#calculate llk
ylo=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gammaLo)
yhi=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gammaHi)
#keep doubling until ylo<yslice and yhi<yslice
oo=0
ylo
(ylo>yslice)
(oo<MaxIter)
oo=0
while ((ylo>yslice) & (oo<MaxIter)){
b.gammaLo=b.gammaLo-w
ylo=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gammaLo)
oo=oo+1
}
ylo
b.gammaLo
Doubling_bgamma=function(soma.media,w,b.gamma,yslice,MaxIter,ysoma){
b.gammaLo=b.gamma-w*runif(1)
b.gammaHi=b.gammaLo+w
#calculate llk
ylo=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gammaLo)
yhi=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gammaHi)
#keep doubling until ylo<yslice and yhi<yslice
oo=0
while ((ylo>yslice) & (oo<MaxIter)){
b.gammaLo=b.gammaLo-w
if (b.gammaLo<0.0000001) { #avoid negative values
b.gammaLo=0.0000001
break;
}
ylo=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gammaLo)
oo=oo+1
}
oo=0
while ((yhi>yslice) & (oo<MaxIter)){
b.gammaHi=b.gammaHi+w
yhi=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gammaHi)
oo=oo+1
}
c(b.gammaLo,b.gammaHi)
}
media=exp(xmat%*%betas)
soma.media=GetSomaMedia(z=z-1,media=media,ngroups=ngroups,nysoma=n.ysoma,SegID=seg.id-1)
#define upper bound
upper1=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gamma)
yslice=upper1-rexp(1);
#define slice
rango1=Doubling_bgamma(soma.media=soma.media,w=w,b.gamma=b.gamma,yslice=yslice,MaxIter=MaxIter,ysoma=ysoma)
rango1
rango1
diff1=rango1[2]-rango1[1]
yfim=-Inf
oo=0
Shrink_Sample_bgamma=function(rango1,yslice,MaxIter,soma.media,ysoma,n.ysoma,b.gamma){
diff1=rango1[2]-rango1[1]
yfim=-Inf
oo=0
while ((yfim<yslice) & (diff1 > 0.0001) & (oo<MaxIter)){
b.gamma=runif(1,min=rango1[1],max=rango1[2])
yfim=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gamma)
if (yfim<yslice){ #shrink the slice if x falls outside
DistLo=abs(rango1[1]-x)
DistHi=abs(rango1[2]-x)
if (DistLo>DistHi) rango1[1]=x
if (DistLo<DistHi) rango1[2]=x
diff1=rango1[2]-rango1[1]
}
oo=oo+1
}
b.gamma
}
tmp=Shrink_Sample_bgamma(rango1=rango1,yslice=yslice,MaxIter=MaxIter,
soma.media=soma.media,ysoma=ysoma,n.ysoma=n.ysoma,b.gamma=b.gamma)
Shrink_Sample_bgamma=function(rango1,yslice,MaxIter,soma.media,ysoma,n.ysoma,b.gamma){
diff1=rango1[2]-rango1[1]
yfim=-Inf
oo=0
while ((yfim<yslice) & (diff1 > 0.0001) & (oo<MaxIter)){
x=runif(1,min=rango1[1],max=rango1[2])
yfim=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=x)
if (yfim<yslice){ #shrink the slice if x falls outside
DistLo=abs(rango1[1]-x)
DistHi=abs(rango1[2]-x)
if (DistLo>DistHi) rango1[1]=x
if (DistLo<DistHi) rango1[2]=x
diff1=rango1[2]-rango1[1]
}
oo=oo+1
}
x
}
media=exp(xmat%*%betas)
soma.media=GetSomaMedia(z=z-1,media=media,ngroups=ngroups,nysoma=n.ysoma,SegID=seg.id-1)
#define upper bound
upper1=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gamma)
yslice=upper1-rexp(1);
#define slice
rango1=Doubling_bgamma(soma.media=soma.media,w=w,b.gamma=b.gamma,yslice=yslice,MaxIter=MaxIter,ysoma=ysoma)
tmp=Shrink_Sample_bgamma(rango1=rango1,yslice=yslice,MaxIter=MaxIter,
soma.media=soma.media,ysoma=ysoma,n.ysoma=n.ysoma,b.gamma=b.gamma)
tmp
rm(list=ls())
library('Rcpp')
set.seed(1)
setwd('Z:\\Users\\drvalle\\GIT_models\\resist')
sourceCpp('resist_aux.cpp')
source('gibbs_resist_func.R')
source('slice_betas.R')
source('slice_bgamma.R')
source('gibbs_resist.R')
dat=read.csv('fake data.csv',as.is=T)
ind=grep('cov',colnames(dat))
nparam=length(ind)+1
#priors
var.betas=c(10,rep(1,nparam-1))
gamma1=0.1
ngroups=4
#stuff for gibbs sampler
w=0.1
MaxIter=100
ngibbs=1000
nburn=ngibbs/2
mod=gibbs_resist(dat=dat,var.betas=var.betas,gamma1=gamma1,ngroups=ngroups,ngibbs=ngibbs,nburn=nburn)
rm(list=ls())
library('Rcpp')
set.seed(1)
setwd('Z:\\Users\\drvalle\\GIT_models\\resist')
sourceCpp('resist_aux.cpp')
source('gibbs_resist_func.R')
source('slice_betas.R')
source('slice_bgamma.R')
source('gibbs_resist.R')
dat=read.csv('fake data.csv',as.is=T)
ind=grep('cov',colnames(dat))
nparam=length(ind)+1
#priors
var.betas=c(10,rep(1,nparam-1))
gamma1=0.1
ngroups=4
#stuff for gibbs sampler
w=0.1
MaxIter=100
ngibbs=1000
nburn=ngibbs/2
n=nrow(dat)
ind=grep('cov',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
nparam=ncol(xmat)
seg.id=dat$seg.id
#get y soma
tmp=unique(dat[,c('seg.id','ysoma')])
cond=!is.na(tmp$ysoma)
ysoma=tmp[cond,'ysoma']
n.ysoma=length(ysoma)
#initial parameters
betas=matrix(0,nparam,ngroups)
b.gamma=2
z=sample(1:ngroups,size=n.ysoma,replace=T)
theta=rep(1/ngroups,ngroups)
#stuff for gibbs sampler
jump1=list(b.gamma=1)
accept1=list(b.gamma=0)
store.betas=matrix(NA,ngibbs,nparam*ngroups)
store.z=matrix(NA,ngibbs,n.ysoma)
store.b=matrix(NA,ngibbs,1)
store.llk=matrix(NA,ngibbs,1)
store.theta=matrix(NA,ngibbs,ngroups)
nadapt=50
for (i in 1:ngibbs){
print(i)
#sample betas
betas=Sample_betas(ngroups=ngroups,nparam=nparam,xmat=xmat,z=z,
ysoma=ysoma,betas=betas,b.gamma=b.gamma,var.betas=var.betas,
w=w,MaxIter=MaxIter,seg.id=seg.id)
#sample b.gamma (implement slice sampler)
# tmp=sample.b.gamma(betas=betas,xmat=xmat,ysoma=ysoma,jump=jump1$b.gamma,
#                    b.gamma=b.gamma,seg.id=seg.id,z=z,n=n,n.ysoma=n.ysoma)
# b.gamma=tmp$b.gamma
# accept1$b.gamma=accept1$b.gamma+tmp$accept
b.gamma=Sample_bgamma(ngroups=ngroups,nparam=nparam,xmat=xmat,
z=z,ysoma=ysoma,betas=betas,b.gamma=b.gamma,
w=w,MaxIter=MaxIter,seg.id=seg.id,n.ysoma=n.ysoma)
# b.gamma=b.true
#sample z
z=sample.z(xmat=xmat,betas=betas,n.ysoma=n.ysoma,ngroups=ngroups,seg.id=seg.id,
b.gamma=b.gamma,ysoma=ysoma,ltheta=log(theta))
# z=aux.true$z
#estimate theta
theta=sample.theta(z=z,gamma1=gamma1,ngroups=ngroups)
# theta=rep(1/ngroups,ngroups)
#get llk
llk=get.llk(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,seg.id=seg.id,z=z,n=n,n.ysoma=n.ysoma)
#store results
store.betas[i,]=betas
store.b[i]=b.gamma
store.llk[i]=llk
store.z[i,]=z
store.theta[i,]=theta
#adapt MH
if (i%%nadapt==0 & i<nburn){
for (j in 1:length(jump1)){
accept.rate=accept1[[j]]/nadapt
jump.tmp=jump1[[j]]
print(accept.rate)
cond=accept.rate<0.1; jump.tmp[cond]=jump.tmp[cond]/2
cond=accept.rate>0.5; jump.tmp[cond]=jump.tmp[cond]*2
jump1[[j]]=jump.tmp
accept1[[j]]=rep(0,length(jump.tmp))
}
}
}
Sample_bgamma(ngroups=ngroups,nparam=nparam,xmat=xmat,
z=z,ysoma=ysoma,betas=betas,b.gamma=b.gamma,
w=w,MaxIter=MaxIter,seg.id=seg.id,n.ysoma=n.ysoma)
Sample_bgamma(ngroups=ngroups,nparam=nparam,xmat=xmat,
z=z,ysoma=ysoma,betas=betas,b.gamma=b.gamma,
w=w,MaxIter=MaxIter,seg.id=seg.id,n.ysoma=n.ysoma)
Sample_bgamma(ngroups=ngroups,nparam=nparam,xmat=xmat,
z=z,ysoma=ysoma,betas=betas,b.gamma=b.gamma,
w=w,MaxIter=MaxIter,seg.id=seg.id,n.ysoma=n.ysoma)
Sample_bgamma(ngroups=ngroups,nparam=nparam,xmat=xmat,
z=z,ysoma=ysoma,betas=betas,b.gamma=b.gamma,
w=w,MaxIter=MaxIter,seg.id=seg.id,n.ysoma=n.ysoma)
media=exp(xmat%*%betas)
soma.media=GetSomaMedia(z=z-1,media=media,ngroups=ngroups,nysoma=n.ysoma,SegID=seg.id-1)
#define upper bound
upper1=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gamma)
yslice=upper1-rexp(1);
b.gamma
media=exp(xmat%*%betas)
soma.media=GetSomaMedia(z=z-1,media=media,ngroups=ngroups,nysoma=n.ysoma,SegID=seg.id-1)
soma.media
upper1=llk_bgamma(soma.media=soma.media,ysoma=ysoma,b.gamma=b.gamma)
yslice=upper1-rexp(1);
rango1=Doubling_bgamma(soma.media=soma.media,w=w,b.gamma=b.gamma,yslice=yslice,MaxIter=MaxIter,ysoma=ysoma)
rango1
rango1=Doubling_bgamma(soma.media=soma.media,w=w,b.gamma=b.gamma,yslice=yslice,MaxIter=MaxIter,ysoma=ysoma)
yslice
range(soma.media)
rm(list=ls())
library('Rcpp')
set.seed(1)
setwd('Z:\\Users\\drvalle\\GIT_models\\resist')
sourceCpp('resist_aux.cpp')
source('gibbs_resist_func.R')
source('slice_betas.R')
source('slice_bgamma.R')
source('gibbs_resist.R')
dat=read.csv('fake data.csv',as.is=T)
ind=grep('cov',colnames(dat))
nparam=length(ind)+1
#priors
var.betas=c(10,rep(1,nparam-1))
gamma1=0.1
ngroups=4
#stuff for gibbs sampler
w=0.1
MaxIter=100
ngibbs=1000
nburn=ngibbs/2
mod=gibbs_resist(dat=dat,var.betas=var.betas,gamma1=gamma1,ngroups=ngroups,ngibbs=ngibbs,nburn=nburn)
plot(mod$llk,type='l')
nburn=200
abline(v=nburn,col='red')
plot(mod$llk[nburn:ngibbs],type='l')
plot(mod$b.gamma,type='l')
plot(mod$b.gamma[nburn:ngibbs],type='l')
set.seed(3)
#calculate covariates
setwd('Z:\\Users\\drvalle\\GIT_models\\resist')
n=10000
nparam=5
xmat=matrix(runif(n*nparam,min=-3,max=3),n,nparam)
nomes.cov=paste0('covs',1:nparam)
colnames(xmat)=nomes.cov
n=nrow(xmat)
#get groups
ngroup=4
init1=sort(c(1,sample(1:n,size=n/10)))
end1=c(init1[-1]-1,n)
aux.true=aux=data.frame(init1=init1,end1=end1,z=sample(1:ngroup,size=length(init1),replace=T))
#get media
nparam=6
betas.true=betas=matrix(c(-1,0 ,1,0,-1,0,
1,0 ,1,0, 1,0,
-1,-1,0,0,0,0,
0, 0,1,1,0,0),nparam,ngroup)
media=exp(cbind(1,xmat)%*%betas)
b.true=b=0.5
atmp=b*media
tmp=data.frame(zestim=mod$z[ngibbs,],ztrue=aux.true$z)
tmp1=table(tmp); tmp1
ordem=numeric()
for (i in 1:ncol(tmp1)){
aux=which(tmp1[,i]==max(tmp1[,i]))
n=length(aux)
if (n==1) ordem=c(ordem,aux)
if (n>1) ordem=c(ordem,sample(aux,size=1))
}
tmp1[ordem,]
ordem
tmp=data.frame(zestim=mod$z[ngibbs,],ztrue=aux.true$z)
tmp1=table(tmp); tmp1
rm(list=ls())
library('Rcpp')
set.seed(1)
setwd('Z:\\Users\\drvalle\\GIT_models\\resist')
sourceCpp('resist_aux.cpp')
source('gibbs_resist_func.R')
source('slice_betas.R')
source('slice_bgamma.R')
source('gibbs_resist.R')
dat=read.csv('fake data.csv',as.is=T)
ind=grep('cov',colnames(dat))
nparam=length(ind)+1
#priors
var.betas=c(10,rep(1,nparam-1))
gamma1=0.1
ngroups=4
#stuff for gibbs sampler
w=0.1
MaxIter=100
ngibbs=10000
nburn=ngibbs/2
mod=gibbs_resist(dat=dat,var.betas=var.betas,gamma1=gamma1,ngroups=ngroups,ngibbs=ngibbs,nburn=nburn)
rm(list=ls())
library('Rcpp')
set.seed(1)
setwd('Z:\\Users\\drvalle\\GIT_models\\resist')
sourceCpp('resist_aux.cpp')
source('gibbs_resist_func.R')
source('slice_betas.R')
source('slice_bgamma.R')
source('gibbs_resist.R')
dat=read.csv('fake data.csv',as.is=T)
ind=grep('cov',colnames(dat))
nparam=length(ind)+1
#priors
var.betas=c(10,rep(1,nparam-1))
gamma1=0.1
ngroups=4
#stuff for gibbs sampler
w=0.1
MaxIter=100
ngibbs=10000
nburn=ngibbs/2
mod=gibbs_resist(dat=dat,var.betas=var.betas,gamma1=gamma1,ngroups=ngroups,ngibbs=ngibbs,nburn=nburn)
str(mod)
plot(mod$llk,type='l')
nburn=200
abline(v=nburn,col='red')
plot(mod$llk[nburn:ngibbs],type='l')
plot(mod$llk,type='l')
nburn=9000
abline(v=nburn,col='red')
plot(mod$llk[nburn:ngibbs],type='l')
nburn=200
abline(v=nburn,col='red')
plot(mod$llk[nburn:ngibbs],type='l')
plot(mod$b.gamma,type='l')
plot(mod$b.gamma[nburn:ngibbs],type='l')
quantile(mod$b.gamma[nburn:ngibbs],c(0.025,0.5,0.975))
tmp=data.frame(zestim=mod$z[ngibbs,],ztrue=aux.true$z)
tmp1=table(tmp); tmp1
set.seed(3)
#calculate covariates
setwd('Z:\\Users\\drvalle\\GIT_models\\resist')
n=10000
nparam=5
xmat=matrix(runif(n*nparam,min=-3,max=3),n,nparam)
nomes.cov=paste0('covs',1:nparam)
colnames(xmat)=nomes.cov
n=nrow(xmat)
#get groups
ngroup=4
init1=sort(c(1,sample(1:n,size=n/10)))
end1=c(init1[-1]-1,n)
aux.true=aux=data.frame(init1=init1,end1=end1,z=sample(1:ngroup,size=length(init1),replace=T))
#get media
nparam=6
betas.true=betas=matrix(c(-1,0 ,1,0,-1,0,
1,0 ,1,0, 1,0,
-1,-1,0,0,0,0,
0, 0,1,1,0,0),nparam,ngroup)
media=exp(cbind(1,xmat)%*%betas)
b.true=b=0.5
atmp=b*media
tmp=data.frame(zestim=mod$z[ngibbs,],ztrue=aux.true$z)
tmp1=table(tmp); tmp1
theta
mod$theta[ngibbs,]
betas.estim=matrix(mod$betas[ngibbs,],nparam,ngroups)
betas.estim
round(betas.estim,3)
