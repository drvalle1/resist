upper1=sum(get.llk(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,seg.id=seg.id,nagg=nagg))
yslice=upper1-rexp(1);
Doubling_Betas=function(xmat,betas1,w,b.gamma,yslice,MaxIter,ysoma,seg.id,nagg,target.p){
betasLo=betasHi=betas1
betasLo[target.p]=betasLo[target.p]-w*runif(1)
betasHi[target.p]=betasLo[target.p]+w
#calculate llk
ylo=get.llk(betas=betasLo,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,seg.id=seg.id,nagg=nagg)
yhi=get.llk(betas=betasHi,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,seg.id=seg.id,nagg=nagg)
#keep doubling until ylo<yslice and yhi<yslice
oo=0
while ((ylo>yslice) & (oo<MaxIter)){
betasLo[target.p]=betasLo[target.p]-w
ylo=get.llk(betas=betasLo,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,seg.id=seg.id,nagg=nagg)
oo=oo+1
}
oo=0
while ((yhi>yslice) & (oo<MaxIter)){
betasHi[target.p]=betasHi[target.p]+w
yhi=get.llk(betas=betasHi,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,seg.id=seg.id,nagg=nagg)
oo=oo+1
}
c(betasLo[target.p],betasHi[target.p])
}
j=1
upper1=sum(get.llk(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,seg.id=seg.id,nagg=nagg))
yslice=upper1-rexp(1);
rango1=Doubling_Betas(xmat=xmat,betas1=betas,w=w,b.gamma=b.gamma,
yslice=yslice,MaxIter=MaxIter,ysoma=ysoma,
seg.id=seg.id,nagg=nagg,target.p=j)
warnings()
Doubling_Betas=function(xmat,betas1,w,b.gamma,yslice,MaxIter,ysoma,seg.id,nagg,target.p){
betasLo=betasHi=betas1
betasLo[target.p]=betasLo[target.p]-w*runif(1)
betasHi[target.p]=betasLo[target.p]+w
#calculate llk
ylo=sum(get.llk(betas=betasLo,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,seg.id=seg.id,nagg=nagg))
yhi=sum(get.llk(betas=betasHi,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,seg.id=seg.id,nagg=nagg))
#keep doubling until ylo<yslice and yhi<yslice
oo=0
while ((ylo>yslice) & (oo<MaxIter)){
betasLo[target.p]=betasLo[target.p]-w
ylo=sum(get.llk(betas=betasLo,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,seg.id=seg.id,nagg=nagg))
oo=oo+1
}
oo=0
while ((yhi>yslice) & (oo<MaxIter)){
betasHi[target.p]=betasHi[target.p]+w
yhi=sum(get.llk(betas=betasHi,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,seg.id=seg.id,nagg=nagg))
oo=oo+1
}
c(betasLo[target.p],betasHi[target.p])
}
j=1
upper1=sum(get.llk(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,seg.id=seg.id,nagg=nagg))
yslice=upper1-rexp(1);
#define slice
rango1=Doubling_Betas(xmat=xmat,betas1=betas,w=w,b.gamma=b.gamma,
yslice=yslice,MaxIter=MaxIter,ysoma=ysoma,
seg.id=seg.id,nagg=nagg,target.p=j)
rango1
Shrink_Sample_Betas=function(rango1,yslice,MaxIter,betas1,ysoma,xmat,seg.id,
nagg,b.gamma,target.p){
diff1=rango1[2]-rango1[1]
yfim=-Inf
oo=0
while ((yfim<yslice) & (diff1 > 0.0001) & (oo<MaxIter)){
x=runif(1,min=rango1[1],max=rango1[2])
betas1[target.p]=x
yfim=sum(get.llk(betas=betas1,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,seg.id=seg.id,nagg=nagg))
if (yfim<yslice){ #shrink the slice if x falls outside
DistLo=abs(rango1[1]-x)
DistHi=abs(rango1[2]-x)
if (DistLo>DistHi) rango1[1]=x
if (DistLo<DistHi) rango1[2]=x
diff1=rango1[2]-rango1[1]
}
oo=oo+1
}
betas1
}
#define upper bound
upper1=sum(get.llk(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,seg.id=seg.id,nagg=nagg))
yslice=upper1-rexp(1);
#define slice
rango1=Doubling_Betas(xmat=xmat,betas1=betas,w=w,b.gamma=b.gamma,
yslice=yslice,MaxIter=MaxIter,ysoma=ysoma,
seg.id=seg.id,nagg=nagg,target.p=j)
Shrink_Sample_Betas=function(rango1,yslice,MaxIter,betas1,ysoma,xmat,seg.id,
nagg,b.gamma,target.p){
diff1=rango1[2]-rango1[1]
yfim=-Inf
oo=0
while ((yfim<yslice) & (diff1 > 0.0001) & (oo<MaxIter)){
x=runif(1,min=rango1[1],max=rango1[2])
betas1[target.p]=x
yfim=sum(get.llk(betas=betas1,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,seg.id=seg.id,nagg=nagg))
if (yfim<yslice){ #shrink the slice if x falls outside
DistLo=abs(rango1[1]-x)
DistHi=abs(rango1[2]-x)
if (DistLo>DistHi) rango1[1]=x
if (DistLo<DistHi) rango1[2]=x
diff1=rango1[2]-rango1[1]
}
oo=oo+1
}
betas1
}
betas=Shrink_Sample_Betas(rango1=rango1,yslice=yslice,MaxIter=MaxIter,
betas1=betas,ysoma=ysoma,xmat=xmat,
seg.id=seg.id,nagg=nagg,b.gamma=b.gamma,
target.p=j)
betas
n=nrow(xmat)
nparam=ncol(xmat)
nagg=length(ysoma)
#initial parameters
betas=matrix(0,nparam,1)
b.gamma=1
#for joint sampling of betas
var1=diag(1,nparam)
#stuff for gibbs sampler
store.betas=matrix(NA,ngibbs,nparam)
store.b=matrix(NA,ngibbs,1)
store.llk=matrix(NA,ngibbs,1)
for (i in 1:ngibbs){
print(i)
#sample betas
betas=Sample_betas(nparam=nparam,xmat=xmat,ysoma=ysoma,betas=betas,
b.gamma=b.gamma,var.betas=var1,w=0.5,MaxIter=100,seg.id=seg.id,nagg=nagg)
# betas=betas.true
#sample b.gamma
b.gamma=Sample_bgamma(nparam=nparam,xmat=xmat,
ysoma=ysoma,betas=betas,b.gamma=b.gamma,
w=w,MaxIter=100,seg.id=seg.id,nagg=nagg)
# b.gamma=b.true
#get llk
p=get.llk(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,
seg.id=seg.id,nagg=nagg)
llk1=sum(p)
#adaptation MH algorithm
if (i<nburn & i%%accept.output==0){
k=print.adapt(accept1z=accept1,jump1z=jump1,accept.output=accept.output)
accept1=k$accept1
jump1=k$jump1
#get correlation structure from posterior samples
seq1=(i-accept.output+1):(i-1)
var1=var(store.betas[seq1,])
}
#store results
store.betas[i,]=betas
store.b[i]=b.gamma
store.llk[i]=sum(llk1)
}
rm(list=ls())
library('Rcpp')
library('mvtnorm')
set.seed(92)
setwd('U:\\GIT_models\\resist')
source('gibbs_resist.R')
source('gibbs_resist_func.R')
source('slice_b_gamma.R')
source('slice_betas.R')
sourceCpp('resist_aux.cpp')
dat=read.csv('fake data.csv',as.is=T)
ind=grep('cov',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
seg.id=dat$seg.id
#get y soma
tmp=unique(dat[,c('seg.id','ysoma')])
cond=!is.na(tmp$ysoma)
ysoma=tmp[cond,'ysoma']
ngibbs=1000
nburn=ngibbs/2
w=0.1
MaxIter=100
#priors
var.betas=c(100,rep(10,ncol(xmat)-1))
n=nrow(xmat)
nparam=ncol(xmat)
nagg=length(ysoma)
#initial parameters
betas=matrix(0,nparam,1)
b.gamma=1
#for joint sampling of betas
var1=diag(1,nparam)
#stuff for gibbs sampler
store.betas=matrix(NA,ngibbs,nparam)
store.b=matrix(NA,ngibbs,1)
store.llk=matrix(NA,ngibbs,1)
betas=Sample_betas(nparam=nparam,xmat=xmat,ysoma=ysoma,betas=betas,
b.gamma=b.gamma,var.betas=var1,w=0.5,MaxIter=100,seg.id=seg.id,nagg=nagg)
# betas=betas.true
#sample b.gamma
b.gamma=Sample_bgamma(nparam=nparam,xmat=xmat,
ysoma=ysoma,betas=betas,b.gamma=b.gamma,
w=w,MaxIter=100,seg.id=seg.id,nagg=nagg)
p=get.llk(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,
seg.id=seg.id,nagg=nagg)
llk1=sum(p)
n=nrow(xmat)
nparam=ncol(xmat)
nagg=length(ysoma)
#initial parameters
betas=matrix(0,nparam,1)
b.gamma=1
#for joint sampling of betas
var1=diag(1,nparam)
#stuff for gibbs sampler
store.betas=matrix(NA,ngibbs,nparam)
store.b=matrix(NA,ngibbs,1)
store.llk=matrix(NA,ngibbs,1)
for (i in 1:ngibbs){
print(i)
#sample betas
betas=Sample_betas(nparam=nparam,xmat=xmat,ysoma=ysoma,betas=betas,
b.gamma=b.gamma,var.betas=var1,w=0.5,MaxIter=100,seg.id=seg.id,nagg=nagg)
# betas=betas.true
#sample b.gamma
b.gamma=Sample_bgamma(nparam=nparam,xmat=xmat,
ysoma=ysoma,betas=betas,b.gamma=b.gamma,
w=w,MaxIter=100,seg.id=seg.id,nagg=nagg)
# b.gamma=b.true
#get llk
p=get.llk(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,
seg.id=seg.id,nagg=nagg)
llk1=sum(p)
#store results
store.betas[i,]=betas
store.b[i]=b.gamma
store.llk[i]=sum(llk1)
}
set.seed(18)
setwd('U:\\GIT_models\\resist')
n=50000
nparam=3
xmat=matrix(runif(n*nparam,min=-2,max=2),n,nparam)
nomes.cov=paste0('covs',1:nparam)
colnames(xmat)=nomes.cov
n=nrow(xmat)
betas.true=betas=runif(nparam+1)
media=exp(cbind(1,xmat)%*%betas); range(round(media,3))
b.true=b=4
a=b*media
ymat=rgamma(n,a,b)
fim=as.data.frame(xmat)
fim$ysoma=NA
fim$seg.id=NA
#aggregate these data
ind=floor(c(seq(from=1,to=n,by=n/5000),n+1)) #has to include 1 and n to use all observations
for (i in 2:length(ind)){
seq1=ind[i-1]:(ind[i]-1)
n=length(seq1)
fim$seg.id[seq1]=i-1
ysoma=ymat[seq1]
fim$ysoma[ind[i]-1]=sum(ysoma)
}
max(fim$seg.id)
length(unique(fim$seg.id))
range(fim$ysoma,na.rm=T)
rm(list=ls())
library('Rcpp')
library('mvtnorm')
set.seed(92)
setwd('U:\\GIT_models\\resist')
source('gibbs_resist.R')
source('gibbs_resist_func.R')
source('slice_b_gamma.R')
source('slice_betas.R')
sourceCpp('resist_aux.cpp')
dat=read.csv('fake data.csv',as.is=T)
ind=grep('cov',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
seg.id=dat$seg.id
#get y soma
tmp=unique(dat[,c('seg.id','ysoma')])
cond=!is.na(tmp$ysoma)
ysoma=tmp[cond,'ysoma']
ngibbs=1000
nburn=ngibbs/2
w=0.1
MaxIter=100
#priors
var.betas=c(100,rep(10,ncol(xmat)-1))
mod.res=gibbs_resist(ysoma=ysoma,xmat=xmat,seg.id=seg.id,
ngibbs=ngibbs,nburn=nburn,var.betas=var.betas,
w=w,MaxIter=MaxtIter)
rm(list=ls())
library('Rcpp')
library('mvtnorm')
set.seed(92)
setwd('U:\\GIT_models\\resist')
source('gibbs_resist.R')
source('gibbs_resist_func.R')
source('slice_b_gamma.R')
source('slice_betas.R')
sourceCpp('resist_aux.cpp')
dat=read.csv('fake data.csv',as.is=T)
ind=grep('cov',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
seg.id=dat$seg.id
#get y soma
tmp=unique(dat[,c('seg.id','ysoma')])
cond=!is.na(tmp$ysoma)
ysoma=tmp[cond,'ysoma']
ngibbs=1000
nburn=ngibbs/2
w=0.1
MaxIter=100
#priors
var.betas=c(100,rep(10,ncol(xmat)-1))
mod.res=gibbs_resist(ysoma=ysoma,xmat=xmat,seg.id=seg.id,
ngibbs=ngibbs,nburn=nburn,var.betas=var.betas,
w=w,MaxIter=MaxIter)
rm(list=ls())
library('Rcpp')
library('mvtnorm')
set.seed(92)
setwd('U:\\GIT_models\\resist')
source('gibbs_resist.R')
source('gibbs_resist_func.R')
source('slice_b_gamma.R')
source('slice_betas.R')
sourceCpp('resist_aux.cpp')
dat=read.csv('fake data.csv',as.is=T)
ind=grep('cov',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
seg.id=dat$seg.id
#get y soma
tmp=unique(dat[,c('seg.id','ysoma')])
cond=!is.na(tmp$ysoma)
ysoma=tmp[cond,'ysoma']
ngibbs=1000
nburn=ngibbs/2
w=0.1
MaxIter=100
#priors
var.betas=c(100,rep(10,ncol(xmat)-1))
mod.res=gibbs_resist(ysoma=ysoma,xmat=xmat,seg.id=seg.id,
ngibbs=ngibbs,nburn=nburn,var.betas=var.betas,
w=w,MaxIter=MaxIter)
set.seed(18)
setwd('U:\\GIT_models\\resist')
n=50000
nparam=3
xmat=matrix(runif(n*nparam,min=-2,max=2),n,nparam)
nomes.cov=paste0('covs',1:nparam)
colnames(xmat)=nomes.cov
n=nrow(xmat)
betas.true=betas=runif(nparam+1)
media=exp(cbind(1,xmat)%*%betas); range(round(media,3))
b.true=b=4
a=b*media
ymat=rgamma(n,a,b)
fim=as.data.frame(xmat)
fim$ysoma=NA
fim$seg.id=NA
#aggregate these data
ind=floor(c(seq(from=1,to=n,by=n/5000),n+1)) #has to include 1 and n to use all observations
for (i in 2:length(ind)){
seq1=ind[i-1]:(ind[i]-1)
n=length(seq1)
fim$seg.id[seq1]=i-1
ysoma=ymat[seq1]
fim$ysoma[ind[i]-1]=sum(ysoma)
}
max(fim$seg.id)
length(unique(fim$seg.id))
range(fim$ysoma,na.rm=T)
store.llk=mod.res$llk
store.b=mod.res$b.gamma
store.betas=mod.res$betas
store.theta=mod.res$theta
par(mfrow=c(1,1))
plot(store.llk,type='l')
nburn=500
abline(v=nburn,col='red')
plot(store.llk[nburn:ngibbs],type='l')
par(mfrow=c(2,2),mar=rep(1,4))
for (i in 1:4) plot(store.betas[1:ngibbs,i],type='l')
for (i in 1:4) plot(store.betas[nburn:ngibbs,i],type='l')
par(mfrow=c(1,1))
plot(store.b,type='l')
abline(h=b.true,col='red')
par(mfrow=c(1,1),mar=rep(3,4))
betas.estim=store.betas[ngibbs,]
rango=range(c(betas.estim,betas.true))
plot(betas.true,betas.estim,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
rm(list=ls())
set.seed(25)
setwd('U:\\GIT_models\\resist')
n=50000
nparam=5
xmat=matrix(runif(n*nparam,min=-2,max=2),n,nparam)
nomes.cov=paste0('covs',1:nparam)
colnames(xmat)=nomes.cov
n=nrow(xmat)
betas.true=betas=runif(nparam+1)
media=exp(cbind(1,xmat)%*%betas); range(round(media,3))
b.true=b=2
a=b*media
ymat=rgamma(n,a,b)
fim=as.data.frame(xmat)
fim$ysoma=NA
fim$seg.id=NA
#aggregate these data
ind=floor(c(seq(from=1,to=n,by=n/5000),n+1)) #has to include 1 and n to use all observations
for (i in 2:length(ind)){
seq1=ind[i-1]:(ind[i]-1)
n=length(seq1)
fim$seg.id[seq1]=i-1
ysoma=ymat[seq1]
fim$ysoma[ind[i]-1]=sum(ysoma)
}
max(fim$seg.id)
length(unique(fim$seg.id))
range(fim$ysoma,na.rm=T)
#export results
setwd('U:\\GIT_models\\resist')
write.csv(fim,'fake data.csv',row.names=F)
rm(list=ls())
library('Rcpp')
library('mvtnorm')
set.seed(92)
setwd('U:\\GIT_models\\resist')
source('gibbs_resist.R')
source('gibbs_resist_func.R')
source('slice_b_gamma.R')
source('slice_betas.R')
sourceCpp('resist_aux.cpp')
dat=read.csv('fake data.csv',as.is=T)
ind=grep('cov',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
seg.id=dat$seg.id
#get y soma
tmp=unique(dat[,c('seg.id','ysoma')])
cond=!is.na(tmp$ysoma)
ysoma=tmp[cond,'ysoma']
ngibbs=1000
nburn=ngibbs/2
w=0.1
MaxIter=100
#priors
var.betas=c(100,rep(10,ncol(xmat)-1))
mod.res=gibbs_resist(ysoma=ysoma,xmat=xmat,seg.id=seg.id,
ngibbs=ngibbs,nburn=nburn,var.betas=var.betas,
w=w,MaxIter=MaxIter)
set.seed(25)
setwd('U:\\GIT_models\\resist')
n=50000
nparam=5
xmat=matrix(runif(n*nparam,min=-2,max=2),n,nparam)
nomes.cov=paste0('covs',1:nparam)
colnames(xmat)=nomes.cov
n=nrow(xmat)
betas.true=betas=runif(nparam+1)
media=exp(cbind(1,xmat)%*%betas); range(round(media,3))
b.true=b=2
a=b*media
ymat=rgamma(n,a,b)
fim=as.data.frame(xmat)
fim$ysoma=NA
fim$seg.id=NA
#aggregate these data
ind=floor(c(seq(from=1,to=n,by=n/5000),n+1)) #has to include 1 and n to use all observations
for (i in 2:length(ind)){
seq1=ind[i-1]:(ind[i]-1)
n=length(seq1)
fim$seg.id[seq1]=i-1
ysoma=ymat[seq1]
fim$ysoma[ind[i]-1]=sum(ysoma)
}
max(fim$seg.id)
length(unique(fim$seg.id))
range(fim$ysoma,na.rm=T)
store.llk=mod.res$llk
store.b=mod.res$b.gamma
store.betas=mod.res$betas
store.theta=mod.res$theta
#look at correlation
k=cor(cbind(store.b,store.betas))
k[k < 0.5 & k > -0.5]=NA
k
par(mfrow=c(1,1))
plot(store.llk,type='l')
nburn=500
abline(v=nburn,col='red')
plot(store.llk[nburn:ngibbs],type='l')
par(mfrow=c(2,2),mar=rep(1,4))
for (i in 1:4) plot(store.betas[1:ngibbs,i],type='l')
for (i in 1:4) plot(store.betas[nburn:ngibbs,i],type='l')
par(mfrow=c(1,1))
plot(store.b,type='l')
abline(h=b.true,col='red')
par(mfrow=c(1,1),mar=rep(3,4))
betas.estim=store.betas[ngibbs,]
rango=range(c(betas.estim,betas.true))
plot(betas.true,betas.estim,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
par(mfrow=c(1,1),mar=rep(3,4))
betas.estim=store.betas[ngibbs,]
rango=range(c(betas.estim,betas.true))
plot(betas.true,betas.estim,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
k=cor(cbind(store.b,store.betas))
k[k < 0.5 & k > -0.5]=NA
k
k=cor(cbind(store.b,store.betas))
k[k < 0.5 & k > -0.5]=NA
diag(k)=NA
k
