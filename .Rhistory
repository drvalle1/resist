nburn=ngibbs/2
jump1=list(betas=matrix(1,nparam,ngroup),b.gamma=1)
accept1=list(betas=matrix(0,nparam,ngroup),b.gamma=0)
store.betas=matrix(NA,ngibbs,nparam*ngroup)
store.b=matrix(NA,ngibbs,1)
store.llk=matrix(NA,ngibbs,1)
nadapt=50
tmp=sample.betas(betas=betas,xmat=xmat,ysoma=ysoma,jump=jump1$betas,
b.gamma=b.gamma,nparam=nparam,var.betas=var.betas,
seg.id=seg.id,ngroup=ngroup,nagg=nagg,z=z)
betas=tmp$betas
accept1$betas=accept1$betas+tmp$accept
# betas[1]=-1
#sample b.gamma
tmp=sample.b.gamma(betas=betas,xmat=xmat,ysoma=ysoma,jump=jump1$b.gamma,
b.gamma=b.gamma,seg.id=seg.id,ngroup=ngroup,nagg=nagg,z=z)
tmp
rm(list=ls())
set.seed(1)
setwd('U:\\GIT_models\\resist')
source('gibbs_resist_func.R')
dat=read.csv('fake data.csv',as.is=T)
n=nrow(dat)
ind=grep('cov',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
nparam=ncol(xmat)
seg.id=dat$seg.id
ngroup=3
#get y soma
tmp=unique(dat[,c('seg.id','ysoma')])
cond=!is.na(tmp$ysoma)
ysoma=tmp[cond,'ysoma']
nagg=length(ysoma)
#priors
var.betas=c(100,rep(1,nparam-1))
#initial parameters
betas=matrix(0,nparam,ngroup)
b.gamma=2
z=sample(1:ngroup,size=nagg,replace=T)
#stuff for gibbs sampler
ngibbs=1000
nburn=ngibbs/2
jump1=list(betas=matrix(1,nparam,ngroup),b.gamma=1)
accept1=list(betas=matrix(0,nparam,ngroup),b.gamma=0)
store.betas=matrix(NA,ngibbs,nparam*ngroup)
store.b=matrix(NA,ngibbs,1)
store.llk=matrix(NA,ngibbs,1)
nadapt=50
#sample betas
tmp=sample.betas(betas=betas,xmat=xmat,ysoma=ysoma,jump=jump1$betas,
b.gamma=b.gamma,nparam=nparam,var.betas=var.betas,
seg.id=seg.id,ngroup=ngroup,nagg=nagg,z=z)
betas=tmp$betas
accept1$betas=accept1$betas+tmp$accept
# betas[1]=-1
#sample b.gamma
tmp=sample.b.gamma(betas=betas,xmat=xmat,ysoma=ysoma,jump=jump1$b.gamma,
b.gamma=b.gamma,seg.id=seg.id,ngroup=ngroup,nagg=nagg,z=z)
b.gamma=tmp$b.gamma
accept1$b.gamma=accept1$b.gamma+tmp$accept
#sample z
#get llk
p=get.llk(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,
seg.id=seg.id,ngroup=ngroup,nagg=nagg)
llk=0
for (j in 1:ngroup){
cond=z==j
llk=llk+sum(p[cond,j])
}
llk
rm(list=ls())
set.seed(1)
setwd('U:\\GIT_models\\resist')
source('gibbs_resist_func.R')
dat=read.csv('fake data.csv',as.is=T)
n=nrow(dat)
ind=grep('cov',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
nparam=ncol(xmat)
seg.id=dat$seg.id
ngroup=3
#get y soma
tmp=unique(dat[,c('seg.id','ysoma')])
cond=!is.na(tmp$ysoma)
ysoma=tmp[cond,'ysoma']
nagg=length(ysoma)
#priors
var.betas=c(100,rep(1,nparam-1))
#initial parameters
betas=matrix(0,nparam,ngroup)
b.gamma=2
z=sample(1:ngroup,size=nagg,replace=T)
#stuff for gibbs sampler
ngibbs=1000
nburn=ngibbs/2
jump1=list(betas=matrix(1,nparam,ngroup),b.gamma=1)
accept1=list(betas=matrix(0,nparam,ngroup),b.gamma=0)
store.betas=matrix(NA,ngibbs,nparam*ngroup)
store.b=matrix(NA,ngibbs,1)
store.llk=matrix(NA,ngibbs,1)
nadapt=50
for (i in 1:ngibbs){
print(i)
#sample betas
tmp=sample.betas(betas=betas,xmat=xmat,ysoma=ysoma,jump=jump1$betas,
b.gamma=b.gamma,nparam=nparam,var.betas=var.betas,
seg.id=seg.id,ngroup=ngroup,nagg=nagg,z=z)
betas=tmp$betas
accept1$betas=accept1$betas+tmp$accept
# betas[1]=-1
#sample b.gamma
tmp=sample.b.gamma(betas=betas,xmat=xmat,ysoma=ysoma,jump=jump1$b.gamma,
b.gamma=b.gamma,seg.id=seg.id,ngroup=ngroup,nagg=nagg,z=z)
b.gamma=tmp$b.gamma
accept1$b.gamma=accept1$b.gamma+tmp$accept
# b.gamma=b.true
#sample z
#get llk
p=get.llk(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,
seg.id=seg.id,ngroup=ngroup,nagg=nagg)
#sum the loglikel for the correct group
llk=0
for (j in 1:ngroup){
cond=z==j
llk=llk+sum(p[cond,j])
}
#store results
store.betas[i,]=betas
store.b[i]=b.gamma
store.llk[i]=llk
}
plot(store.llk,type='l')
nburn=200
abline(v=nburn,col='red')
plot(store.llk[nburn:ngibbs],type='l')
nburn=250
abline(v=nburn,col='red')
plot(store.llk[nburn:ngibbs],type='l')
plot(store.b,type='l')
plot(store.b[nburn:ngibbs],type='l')
plot(store.b,type='l')
plot(store.b[nburn:ngibbs],type='l')
plot(store.betas[1:ngibbs,1],type='l')
store.betas
betas
rm(list=ls())
set.seed(4)
setwd('U:\\GIT_models\\resist')
n=10000
nparam=3
xmat=matrix(runif(n*nparam,min=-1,max=1),n,nparam)
nomes.cov=paste0('covs',1:nparam)
colnames(xmat)=nomes.cov
n=nrow(xmat)
ngroup=3
betas.true=betas=matrix(c(-1,0 ,1,0,-1,0,
1,0 ,1,0, 1,0,
-1,-1,0,0, 0,0,
0, 0,1,1, 0,0),nparam+1,ngroup,byrow=T)
media=exp(cbind(1,xmat)%*%betas); range(round(media,3))
betas.true
rm(list=ls())
set.seed(4)
setwd('U:\\GIT_models\\resist')
n=10000
nparam=3
xmat=matrix(runif(n*nparam,min=-1,max=1),n,nparam)
nomes.cov=paste0('covs',1:nparam)
colnames(xmat)=nomes.cov
n=nrow(xmat)
ngroup=3
betas.true=betas=matrix(c(-1,0 ,1,0,-1,0,
1,0 ,1,0, 1,0,
-1,-1,0,0, 0,0,
0, 0,1,1, 0,0),nparam+1,ngroup,byrow=T)
betas
rm(list=ls())
set.seed(4)
setwd('U:\\GIT_models\\resist')
n=10000
nparam=3
xmat=matrix(runif(n*nparam,min=-1,max=1),n,nparam)
nomes.cov=paste0('covs',1:nparam)
colnames(xmat)=nomes.cov
n=nrow(xmat)
ngroup=3
betas.true=betas=matrix(c(-1,0 ,1,
1,0 ,1,
-1,-1,0,
0, 0,1),nparam+1,ngroup,byrow=T)
betas.true
rm(list=ls())
set.seed(4)
setwd('U:\\GIT_models\\resist')
n=10000
nparam=3
xmat=matrix(runif(n*nparam,min=-1,max=1),n,nparam)
nomes.cov=paste0('covs',1:nparam)
colnames(xmat)=nomes.cov
n=nrow(xmat)
ngroup=3
betas.true=betas=matrix(c(-1,0 ,1,
1,0 ,1,
-1,-1,0,
0, 0,1),nparam+1,ngroup,byrow=T)
media=exp(cbind(1,xmat)%*%betas); range(round(media,3))
b.true=b=2
a=b*media
ymat=matrix(rgamma(n*ngroup,a,b),n,ngroup); range(ymat)
fim=as.data.frame(xmat)
fim$z=NA
fim$ysoma=NA
fim$seg.id=NA
#aggregate these data
ind=sort(c(sample(1:n,size=n/10),1,n)) #has to include 1 and n to use all observations
for (i in 2:length(ind)){
seq1=ind[i-1]:(ind[i]-1)
n=length(seq1)
fim$seg.id[seq1]=i-1
z=sample(1:ngroup,size=1)
fim$z[ind[i]-1]=z
ysoma=ymat[seq1,z]
fim$ysoma[ind[i]-1]=sum(ysoma)
}
#get z.true
tmp=unique(fim[,c('z','seg.id')])
z.true=tmp[!is.na(tmp$z),]
#export results
ind=which(colnames(fim)=='z')
setwd('U:\\GIT_models\\resist')
write.csv(fim[,-ind],'fake data.csv',row.names=F)
rm(list=ls())
set.seed(1)
setwd('U:\\GIT_models\\resist')
source('gibbs_resist_func.R')
dat=read.csv('fake data.csv',as.is=T)
n=nrow(dat)
ind=grep('cov',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
nparam=ncol(xmat)
seg.id=dat$seg.id
ngroup=3
#get y soma
tmp=unique(dat[,c('seg.id','ysoma')])
cond=!is.na(tmp$ysoma)
ysoma=tmp[cond,'ysoma']
nagg=length(ysoma)
#priors
var.betas=c(100,rep(1,nparam-1))
#initial parameters
betas=matrix(0,nparam,ngroup)
b.gamma=2
z=sample(1:ngroup,size=nagg,replace=T)
#stuff for gibbs sampler
ngibbs=1000
nburn=ngibbs/2
jump1=list(betas=matrix(1,nparam,ngroup),b.gamma=1)
accept1=list(betas=matrix(0,nparam,ngroup),b.gamma=0)
store.betas=matrix(NA,ngibbs,nparam*ngroup)
store.b=matrix(NA,ngibbs,1)
store.llk=matrix(NA,ngibbs,1)
nadapt=50
for (i in 1:ngibbs){
print(i)
#sample betas
tmp=sample.betas(betas=betas,xmat=xmat,ysoma=ysoma,jump=jump1$betas,
b.gamma=b.gamma,nparam=nparam,var.betas=var.betas,
seg.id=seg.id,ngroup=ngroup,nagg=nagg,z=z)
betas=tmp$betas
accept1$betas=accept1$betas+tmp$accept
# betas[1]=-1
#sample b.gamma
tmp=sample.b.gamma(betas=betas,xmat=xmat,ysoma=ysoma,jump=jump1$b.gamma,
b.gamma=b.gamma,seg.id=seg.id,ngroup=ngroup,nagg=nagg,z=z)
b.gamma=tmp$b.gamma
accept1$b.gamma=accept1$b.gamma+tmp$accept
# b.gamma=b.true
#sample z
#get llk
p=get.llk(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,
seg.id=seg.id,ngroup=ngroup,nagg=nagg)
#sum the loglikel for the correct group
llk=0
for (j in 1:ngroup){
cond=z==j
llk=llk+sum(p[cond,j])
}
#store results
store.betas[i,]=betas
store.b[i]=b.gamma
store.llk[i]=llk
}
rm(list=ls())
set.seed(4)
setwd('U:\\GIT_models\\resist')
n=10000
nparam=3
xmat=matrix(runif(n*nparam,min=-1,max=1),n,nparam)
nomes.cov=paste0('covs',1:nparam)
colnames(xmat)=nomes.cov
n=nrow(xmat)
ngroup=3
betas.true=betas=matrix(c(-1,0 ,1,
1,0 ,1,
-1,-1,0,
0, 0,1),nparam+1,ngroup,byrow=T)
media=exp(cbind(1,xmat)%*%betas); range(round(media,3))
b.true=b=2
a=b*media
ymat=matrix(rgamma(n*ngroup,a,b),n,ngroup); range(ymat)
fim=as.data.frame(xmat)
fim$z=NA
fim$ysoma=NA
fim$seg.id=NA
#aggregate these data
ind=sort(c(sample(1:n,size=n/10),1,n)) #has to include 1 and n to use all observations
for (i in 2:length(ind)){
seq1=ind[i-1]:(ind[i]-1)
n=length(seq1)
fim$seg.id[seq1]=i-1
z=sample(1:ngroup,size=1)
fim$z[ind[i]-1]=z
ysoma=ymat[seq1,z]
fim$ysoma[ind[i]-1]=sum(ysoma)
}
#get z.true
tmp=unique(fim[,c('z','seg.id')])
z.true=tmp[!is.na(tmp$z),]
head(z.true)
rm(list=ls())
set.seed(4)
setwd('U:\\GIT_models\\resist')
n=10000
nparam=3
xmat=matrix(runif(n*nparam,min=-1,max=1),n,nparam)
nomes.cov=paste0('covs',1:nparam)
colnames(xmat)=nomes.cov
n=nrow(xmat)
ngroup=3
betas.true=betas=matrix(c(-1,0 ,1,
1,0 ,1,
-1,-1,0,
0, 0,1),nparam+1,ngroup,byrow=T)
media=exp(cbind(1,xmat)%*%betas); range(round(media,3))
b.true=b=2
a=b*media
ymat=matrix(rgamma(n*ngroup,a,b),n,ngroup); range(ymat)
fim=as.data.frame(xmat)
fim$z=NA
fim$ysoma=NA
fim$seg.id=NA
#aggregate these data
ind=sort(c(sample(1:n,size=n/10),1,n)) #has to include 1 and n to use all observations
for (i in 2:length(ind)){
seq1=ind[i-1]:(ind[i]-1)
n=length(seq1)
fim$seg.id[seq1]=i-1
z=sample(1:ngroup,size=1)
fim$z[ind[i]-1]=z
ysoma=ymat[seq1,z]
fim$ysoma[ind[i]-1]=sum(ysoma)
}
#get z.true
tmp=unique(fim[,c('z','seg.id')])
z.true=tmp[!is.na(tmp$z),'z']
#export results
ind=which(colnames(fim)=='z')
setwd('U:\\GIT_models\\resist')
write.csv(fim[,-ind],'fake data.csv',row.names=F)
set.seed(1)
setwd('U:\\GIT_models\\resist')
source('gibbs_resist_func.R')
dat=read.csv('fake data.csv',as.is=T)
n=nrow(dat)
ind=grep('cov',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
nparam=ncol(xmat)
seg.id=dat$seg.id
ngroup=3
#get y soma
tmp=unique(dat[,c('seg.id','ysoma')])
cond=!is.na(tmp$ysoma)
ysoma=tmp[cond,'ysoma']
nagg=length(ysoma)
#priors
var.betas=c(100,rep(1,nparam-1))
#initial parameters
betas=matrix(0,nparam,ngroup)
b.gamma=2
z=sample(1:ngroup,size=nagg,replace=T)
#stuff for gibbs sampler
ngibbs=1000
nburn=ngibbs/2
jump1=list(betas=matrix(1,nparam,ngroup),b.gamma=1)
accept1=list(betas=matrix(0,nparam,ngroup),b.gamma=0)
store.betas=matrix(NA,ngibbs,nparam*ngroup)
store.b=matrix(NA,ngibbs,1)
store.llk=matrix(NA,ngibbs,1)
nadapt=50
for (i in 1:ngibbs){
print(i)
#sample betas
tmp=sample.betas(betas=betas,xmat=xmat,ysoma=ysoma,jump=jump1$betas,
b.gamma=b.gamma,nparam=nparam,var.betas=var.betas,
seg.id=seg.id,ngroup=ngroup,nagg=nagg,z=z)
betas=tmp$betas
accept1$betas=accept1$betas+tmp$accept
# betas[1]=-1
#sample b.gamma
tmp=sample.b.gamma(betas=betas,xmat=xmat,ysoma=ysoma,jump=jump1$b.gamma,
b.gamma=b.gamma,seg.id=seg.id,ngroup=ngroup,nagg=nagg,z=z)
b.gamma=tmp$b.gamma
accept1$b.gamma=accept1$b.gamma+tmp$accept
# b.gamma=b.true
#sample z
z=z.true
#get llk
p=get.llk(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,
seg.id=seg.id,ngroup=ngroup,nagg=nagg)
#sum the loglikel for the correct group
llk=0
for (j in 1:ngroup){
cond=z==j
llk=llk+sum(p[cond,j])
}
#store results
store.betas[i,]=betas
store.b[i]=b.gamma
store.llk[i]=llk
}
set.seed(1)
setwd('U:\\GIT_models\\resist')
source('gibbs_resist_func.R')
dat=read.csv('fake data.csv',as.is=T)
n=nrow(dat)
ind=grep('cov',colnames(dat))
xmat=data.matrix(cbind(1,dat[,ind]))
nparam=ncol(xmat)
seg.id=dat$seg.id
ngroup=3
#get y soma
tmp=unique(dat[,c('seg.id','ysoma')])
cond=!is.na(tmp$ysoma)
ysoma=tmp[cond,'ysoma']
nagg=length(ysoma)
#priors
var.betas=c(100,rep(1,nparam-1))
#initial parameters
betas=matrix(0,nparam,ngroup)
b.gamma=2
z=sample(1:ngroup,size=nagg,replace=T)
#stuff for gibbs sampler
ngibbs=1000
nburn=ngibbs/2
jump1=list(betas=matrix(1,nparam,ngroup),b.gamma=1)
accept1=list(betas=matrix(0,nparam,ngroup),b.gamma=0)
store.betas=matrix(NA,ngibbs,nparam*ngroup)
store.b=matrix(NA,ngibbs,1)
store.llk=matrix(NA,ngibbs,1)
nadapt=50
for (i in 1:ngibbs){
print(i)
#sample betas
tmp=sample.betas(betas=betas,xmat=xmat,ysoma=ysoma,jump=jump1$betas,
b.gamma=b.gamma,nparam=nparam,var.betas=var.betas,
seg.id=seg.id,ngroup=ngroup,nagg=nagg,z=z)
betas=tmp$betas
accept1$betas=accept1$betas+tmp$accept
# betas[1]=-1
#sample b.gamma
tmp=sample.b.gamma(betas=betas,xmat=xmat,ysoma=ysoma,jump=jump1$b.gamma,
b.gamma=b.gamma,seg.id=seg.id,ngroup=ngroup,nagg=nagg,z=z)
b.gamma=tmp$b.gamma
accept1$b.gamma=accept1$b.gamma+tmp$accept
# b.gamma=b.true
#sample z
z=z.true
#get llk
p=get.llk(betas=betas,xmat=xmat,ysoma=ysoma,b.gamma=b.gamma,
seg.id=seg.id,ngroup=ngroup,nagg=nagg)
#sum the loglikel for the correct group
llk=0
for (j in 1:ngroup){
cond=z==j
llk=llk+sum(p[cond,j])
}
#store results
store.betas[i,]=betas
store.b[i]=b.gamma
store.llk[i]=llk
}
b.gamma
plot(store.b,type='l')
betas
betas.estim=betas
betas.true=betas=matrix(c(-1,0 ,1,
1,0 ,1,
-1,-1,0,
0, 0,1),nparam+1,ngroup,byrow=T)
ngroup=3
betas.true=betas=matrix(c(-1,0 ,1,
1,0 ,1,
-1,-1,0,
0, 0,1),nparam+1,ngroup,byrow=T)
nparam=3
ngroup=3
betas.true=betas=matrix(c(-1,0 ,1,
1,0 ,1,
-1,-1,0,
0, 0,1),nparam+1,ngroup,byrow=T)
plot(betas.estim,betas.truw)
plot(betas.estim,betas.true)
